<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>概念介绍 on 瑶风</title>
    <link>https://YOURNAME.github.io/tags/%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/</link>
    <description>Recent content in 概念介绍 on 瑶风</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Jul 2019 14:37:10 +0000</lastBuildDate><atom:link href="https://YOURNAME.github.io/tags/%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>策略模式</title>
      <link>https://YOURNAME.github.io/designpattern/phpallpattern/strategy/</link>
      <pubDate>Mon, 29 Jul 2019 14:37:10 +0000</pubDate>
      
      <guid>https://YOURNAME.github.io/designpattern/phpallpattern/strategy/</guid>
      <description>概念 定义 策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，该模式让算法独立于使用它的客户而独立变化 组成 1 抽象策略角色：策略类，通常由一个接口或者抽象类实现 2 具体策略角色：包装了相关的算法和行</description>
    </item>
    
    <item>
      <title>简单工厂模式</title>
      <link>https://YOURNAME.github.io/designpattern/phpallpattern/simplefactory/</link>
      <pubDate>Wed, 24 Jul 2019 10:40:10 +0000</pubDate>
      
      <guid>https://YOURNAME.github.io/designpattern/phpallpattern/simplefactory/</guid>
      <description>引入 实现计算器 代码实现 1 实现一个基础的计算器功能，代码见https://github.com/laurel-he/design_pattern/blob/master/simpleFactory/ca</description>
    </item>
    
  </channel>
</rss>
