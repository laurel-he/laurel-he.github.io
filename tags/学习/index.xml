<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>学习 on xiaoJiao</title>
    <link>https://laurel-he.github.io/tags/%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 学习 on xiaoJiao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Aug 2022 09:47:00 +0000</lastBuildDate><atom:link href="https://laurel-he.github.io/tags/%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个普通go项目的流程</title>
      <link>https://laurel-he.github.io/go/pipeline/</link>
      <pubDate>Tue, 02 Aug 2022 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/pipeline/</guid>
      <description>需求概述 假设目前有一个普通的项目，一个图书馆管理系统，后端语言使用go，前端使用react，需要做到前后端分离。 数据库可以使用mongoDB或者mysql等等随便什么开源的库，但明确要求，假设这是一个</description>
    </item>
    
    <item>
      <title>GRPC学习文档</title>
      <link>https://laurel-he.github.io/go/basic/grpc/grpc/</link>
      <pubDate>Wed, 27 Jul 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/grpc/grpc/</guid>
      <description>What(GRPC是什么)? RPC 定义 要想知道GRPC是什么，首先得知道RPC是什么。 RPC（Remote Procedure Call）— 远程过程调用,它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的</description>
    </item>
    
    <item>
      <title>minBlog系统接受</title>
      <link>https://laurel-he.github.io/mypro/blog/intro/</link>
      <pubDate>Wed, 20 Jul 2022 19:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/mypro/blog/intro/</guid>
      <description>介绍 项目背景 （1）系统学习了大约一周多时间的go，加上前段时间在没学习的情况下强行用go写了几个需求，我觉得我需要实际项目练手 （2）我目前既在使用csdn,牛客网的博客系统等，也在使用自建的基于hug</description>
    </item>
    
    <item>
      <title>建站流程</title>
      <link>https://laurel-he.github.io/mypro/blog/createweb/</link>
      <pubDate>Wed, 20 Jul 2022 19:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/mypro/blog/createweb/</guid>
      <description>本文介绍如何建立一个网站，以aliyun为例 域名申请 购买ecs workbench连接需要添加安全组规则 需要将80端口和22端口加入安全组规则</description>
    </item>
    
    <item>
      <title>一些基本计算</title>
      <link>https://laurel-he.github.io/base/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Tue, 28 Jun 2022 19:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/base/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E8%AE%A1%E7%AE%97/</guid>
      <description>按位与 按位与运算符&amp;quot;&amp;amp;&amp;ldquo;是双目运算符。其功能是参与运算的两数各对应的二进位相与。只有对应的两个二进位均为1时，结果位才为1 ，否则为0。参与运算的数以补码方式出现。 例如：9</description>
    </item>
    
    <item>
      <title>函数与极限</title>
      <link>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E9%AB%98%E6%95%B0/02_%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E9%AB%98%E6%95%B0/02_%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</guid>
      <description>函数 分段函数 自变量在不同的变化范围中，对应法则用不同的式子表示的函数成为分段函数 函数的特性 有界性 函数y=sin(x)在(-∞,+∞)内是有界的 函数y=tan(x)在(-π/2,π/2)内是无界的 单调性</description>
    </item>
    
    <item>
      <title>初等函数</title>
      <link>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E9%AB%98%E6%95%B0/01_%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E9%AB%98%E6%95%B0/01_%E5%88%9D%E7%AD%89%E5%87%BD%E6%95%B0/</guid>
      <description>引用资料 百度百科基本初等函数定义 定义 初等函数是有基本初等函数经过有限次的四则运算和复合运算所得到的函数。 基本初等函数和初等函数在其定义区间内均未连续函数。 不是初等函数的函数，成为非初等函数,如狄利克雷</description>
    </item>
    
    <item>
      <title>基本概念</title>
      <link>https://laurel-he.github.io/datastructure/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/01_basic/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/01_basic/</guid>
      <description>相关术语 数据 所有能够被计算机识别的符号的集合 数据元素 数据集合的一个个个体 数据对象 具有相同性质的数据元素的组合 数据项 数据结构中讨论的最小结构 数据结构 数据元素极其相互关系，数据结构由一个四元组来表示 Data_Structure = (D,</description>
    </item>
    
    <item>
      <title>基本概念</title>
      <link>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E9%AB%98%E6%95%B0/00_%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E9%AB%98%E6%95%B0/00_%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>太久没有接触到数学相关知识了，这里回忆一些基本概念 函数 函数的近代定义是给定一个数集A，假设其中的元素为x，对A中的元素x施加对应法则f，记作f（x），得到另一数集B，假设B中的元素为y，则y与x之间的</description>
    </item>
    
    <item>
      <title>基础</title>
      <link>https://laurel-he.github.io/database/learn/01basic/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/database/learn/01basic/</guid>
      <description>模式、外模式、内模式 模式 数据抽象成E-R图：即逻辑层，逻辑层的数据模式称为模式 外模式 视图层从某个或某类用户角度出发，只描述与其相关的部分，视图层的数据模式称为外模式 内模式 物理层描述数据实际上如何在磁盘</description>
    </item>
    
    <item>
      <title>树</title>
      <link>https://laurel-he.github.io/datastructure/tree/01basic/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/tree/01basic/</guid>
      <description>参考文章：https://zhuanlan.zhihu.com/p/351240279 一些基本概念 结点的度 一个结点含有的子结点个数称为该结点的度; 树的度 一棵树中，最大结点的度称为树的度; 父结点 若一个结</description>
    </item>
    
    <item>
      <title>算法复杂度分析</title>
      <link>https://laurel-he.github.io/datastructure/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/02_complexity/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/02_complexity/</guid>
      <description>好算法的特性 正确性 最基础的特性 可读性 清晰，容易阅读和修改 健壮性 对异常情况下处理能力的评价 高效性 求解同样问题的不同算法所占时间和空间的评价 时间复杂度 对输入做规定： 最坏情况下的时间复杂度 最好情况下的时间复</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://laurel-he.github.io/datastructure/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/03_linearlist/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/%E7%94%B5%E5%AD%90%E7%A7%91%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/03_linearlist/</guid>
      <description>基础定义 数据元素存在一对一的关系，特点是数据元素按照某种规定存在一个顺序关系，数据元素需要是同一种类型 ADT ADT List { 数据对象:{a~i|a~i∈ElementSet,i=1,2……n,n&amp;gt;=0} 数据关</description>
    </item>
    
    <item>
      <title>行列式</title>
      <link>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/001_%E8%A1%8C%E5%88%97%E5%BC%8F/</link>
      <pubDate>Mon, 20 Jun 2022 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/302%E6%95%B0%E5%AD%A6%E4%BA%8C/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/001_%E8%A1%8C%E5%88%97%E5%BC%8F/</guid>
      <description>二阶行列式 1 $$ \left| \begin{array}{cccc} 1 &amp;amp; 0 &amp;amp; 0 \ -5 &amp;amp; 2 &amp;amp; 3\ 3 &amp;amp; 3 &amp;amp; 5 \end{array} \right| $$ 2 $ \left[ \begin{array}{cccc} 1 &amp;amp; 2 &amp;amp; \cdots &amp;amp; 4 \ 7 &amp;amp; 6 &amp;amp;{\cdot^{\cdot^{\cdot}}} &amp;amp; 5 \ \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \ 8 &amp;amp; 9 &amp;amp; \cdots &amp;amp; 0 \ \end{array} \right] $ 3 $$ \left| \begin{array}{cccc} 1 &amp;amp; 0 &amp;amp; 0 \\ -5 &amp;amp; 2 &amp;amp; 3\\ 3 &amp;amp; 3 &amp;amp; 5 \end{array} \right| $$ 4 $\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$ 5 $$\sum_{i=0}N\int_{a}{b}g(t,i)\text{d}t$$ 6 $$\begin{cases} a_1x+b_1y+c_1z=d_1\ a_2x+b_2y+c_2z=d_2\ a_3x+b_3y+c_3z=d_3\ \end{cases} $$</description>
    </item>
    
    <item>
      <title>试着制作一台计算机吧</title>
      <link>https://laurel-he.github.io/base/howtorunofcomputer/chapter2/</link>
      <pubDate>Wed, 27 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/base/howtorunofcomputer/chapter2/</guid>
      <description>热身问题 CPU是什么的缩写 Hz是表示什么的单位 Z80 CPU是多少比特的CPU</description>
    </item>
    
    <item>
      <title>计算机三大原则</title>
      <link>https://laurel-he.github.io/base/howtorunofcomputer/chapter1/</link>
      <pubDate>Tue, 26 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/base/howtorunofcomputer/chapter1/</guid>
      <description>热身问题 硬件和软件的区别是什么 自行作答 硬件看得见，摸得着，例如cpu，硬盘等等，是真实存在的 软件是通过硬件才能表现出来的，例如运算程序等等 标准答案 软件是一种逻辑的产品，与硬件产品有本质的区别. 硬件是看</description>
    </item>
    
    <item>
      <title>计算机是怎样跑起来的</title>
      <link>https://laurel-he.github.io/base/howtorunofcomputer/prelearn/</link>
      <pubDate>Tue, 26 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/base/howtorunofcomputer/prelearn/</guid>
      <description>这一系列是对书籍《计算机是怎样跑起来的》的学习笔记。 我为什么要在成为程序员的第四年学习这本“基础”书籍？ 因为我发现我的基础非常薄弱，也许我有幸有一丁点学习技巧，所以让我在实际工作中哪怕遇到不会的问题也</description>
    </item>
    
    <item>
      <title>测试函数</title>
      <link>https://laurel-he.github.io/go/test/testfunction/</link>
      <pubDate>Mon, 25 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/test/testfunction/</guid>
      <description>格式要求 引入testing包 每个测试函数必须导入testing包。测试函数有如下的签名： func TestName(t *testing.T) { // ... } 测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头： 例如： func TestSin(t *testing.T) { /* ... */ } func TestCos(t *testing.T) { /*</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://laurel-he.github.io/go/test/basictest/</link>
      <pubDate>Sun, 24 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/test/basictest/</guid>
      <description>*_test.go文件中，三种函数类型 测试函数、基准测试(benchmark)函数、示例函数 测试函数 一个测试函数是以Test为函数名前缀的函数，用于测试程序的一些逻辑行为是否正确； go test命令会调用</description>
    </item>
    
    <item>
      <title>ProtoBuf学习</title>
      <link>https://laurel-he.github.io/go/basic/grpc/protobuf/</link>
      <pubDate>Thu, 17 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/grpc/protobuf/</guid>
      <description>参考文档：Protobuf语法 概念 通俗地说，其实Protobuf就是一种数据传输格式，就像json,xml,yaml等等。官网介绍如下： 他是一种与语言无关、与平台无关，是一种可扩展的用于序列化和结构化</description>
    </item>
    
    <item>
      <title>go语言中一些标志的含义</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/mark/</link>
      <pubDate>Tue, 08 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/mark/</guid>
      <description>符号 符号 含义 解释 示例 := 短变量声明(blank identifier) 定义一个或多个变量并根据它们的初始值为这些变量赋予适当类型的语句 i := 1 _ 空标识符(blank identifier) 空标识符可用于任何语法需要变量名但程序逻辑不需要的时候 for _, arg</description>
    </item>
    
    <item>
      <title>go语言圣经-(1)入门-GIF动画</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/01_2/</link>
      <pubDate>Tue, 08 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/01_2/</guid>
      <description>GIF动画 生成利萨如图形的gif动画。 // Lissajous generates GIF animations of random Lissajous figures. package main import ( &amp;#34;image&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;image/gif&amp;#34; &amp;#34;io&amp;#34; &amp;#34;math&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; ) var palette = []color.Color{color.White, color.Black} const ( whiteIndex = 0 // first color in palette blackIndex = 1 // next color in palette ) func main() { // The sequence of images is deterministic unless we seed // the pseudo-random number generator using the current time. // Thanks to Randall McPherson for pointing out the omission. rand.Seed(time.Now().UTC().UnixNano()) lissajous(os.Stdout) } func</description>
    </item>
    
    <item>
      <title>go语言圣经-(1)入门-命令行参数、查找重复行</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/01_1/</link>
      <pubDate>Mon, 07 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/01_1/</guid>
      <description>基本介绍 可以参考此文章：https://docs.hacknode.org/gopl-zh/ch0/ch0-02.html 基础使用 查看go版本 go version 引入代码 需要在环境变量中添加GOPATH目录，然后使用</description>
    </item>
    
    <item>
      <title>go语言圣经-(2)入门-程序结构</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/02/</link>
      <pubDate>Mon, 07 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/02/</guid>
      <description>2.1命名 Go语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循一个简单的命名规则：一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下</description>
    </item>
    
    <item>
      <title>使用go编写webassembly</title>
      <link>https://laurel-he.github.io/go/webassembly_go_1/</link>
      <pubDate>Fri, 10 Dec 2021 12:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/webassembly_go_1/</guid>
      <description>使用go编写webassembly并在浏览器执行 参考博客 用go写WebAssembly入门 下载安装 go 编写测试文件hello.go package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } 生成wasm文件 GOARCH=wasm GOOS=js go build -o hello.wasm hello.go 在windows下需要</description>
    </item>
    
    <item>
      <title>给小黄鸭讲明白TCP/IP协议</title>
      <link>https://laurel-he.github.io/interview/tcpip/</link>
      <pubDate>Fri, 10 Dec 2021 12:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/interview/tcpip/</guid>
      <description>前言 我上家公司的CTO跟我说过一个道理，一件事情如果你能给一个从来没接触过的小学生讲明白，那么你就能够理解了。 所以我决定用这篇文章记录一下，假设本文有读者，且读者是一个技术小白，那么希望他看完本文后能</description>
    </item>
    
    <item>
      <title>操作系统（东北大学）- 01 概述</title>
      <link>https://laurel-he.github.io/operatingsystem/leanopesys2/guide/</link>
      <pubDate>Sun, 28 Nov 2021 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/leanopesys2/guide/</guid>
      <description>操作系统 基本概念 需要学习： 操作系统是如何工作的 操作系统内部算法和数据结构 设计操作系统过程中的问题和解决方案 学习目的 操作系统的基本概念，基本结构及运行环境 操作系统原理，设计方法和实现技术 概述 操作系统：管</description>
    </item>
    
    <item>
      <title>操作系统（哈工大李治军老师）32讲（全）- 01 概述</title>
      <link>https://laurel-he.github.io/postgraduate/874%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/summary/</link>
      <pubDate>Sun, 28 Nov 2021 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/874%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/summary/</guid>
      <description>来源： 本系列来源于操作系统（哈工大李治军老师）32讲（全）的学习笔记： 操作系统 蓝桥-操作系统练习 操作系统概述 计算机的基本组成： 用计算机这个工具来解决一些实际问题。 操作系统：计算机硬件和应用之间的一层软</description>
    </item>
    
    <item>
      <title>操作系统（哈工大李治军老师）32讲（全）- 01 概述</title>
      <link>https://laurel-he.github.io/postgraduate/874%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%95%99%E6%9D%90_%E6%B1%A4%E5%AD%90%E7%80%9B/01%E7%BB%AA%E8%AE%BA/</link>
      <pubDate>Sun, 28 Nov 2021 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/874%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%95%99%E6%9D%90_%E6%B1%A4%E5%AD%90%E7%80%9B/01%E7%BB%AA%E8%AE%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title>操作系统（哈工大李治军老师）32讲（全）- 02 操作系统引导</title>
      <link>https://laurel-he.github.io/postgraduate/874%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/guide/</link>
      <pubDate>Sun, 28 Nov 2021 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/postgraduate/874%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/guide/</guid>
      <description>来源： 本系列来源于操作系统（哈工大李治军老师）32讲（全）的学习笔记： 操作系统 蓝桥-操作系统练习 课程目标 了解操作系统提供的接口 操作系统内部操作 思索 计算机如何工作的（取指执行）？ 思索过程-&amp;gt;变成程</description>
    </item>
    
    <item>
      <title>设计模式学习——前言</title>
      <link>https://laurel-he.github.io/designpattern/learnbasic/</link>
      <pubDate>Sun, 28 Nov 2021 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/designpattern/learnbasic/</guid>
      <description>参考文档： PHP 设计模式系列 基本介绍 设计模式分类 基本所有的设计模式书籍或文档都会介绍到一个概念，就是设计模式的类型。 设计模式分为创建型，结构型，行为型以及部分其他类型的设计模式 创建型模式 在软件工程中，创建</description>
    </item>
    
    <item>
      <title>go语言学习</title>
      <link>https://laurel-he.github.io/go/summary/</link>
      <pubDate>Thu, 25 Nov 2021 20:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/summary/</guid>
      <description>参考文档： go文档 Go 语言教程 前言 知识查漏补缺第一站，学习go语言。 我去年曾经大概看过go语言的一些语法，但并没有实际操作过，因此，这里假定我需要做一个小的电商平台，一步一步来实现。 步骤 首先大概拆分下需</description>
    </item>
    
    <item>
      <title>swoole基本使用</title>
      <link>https://laurel-he.github.io/php/swoole/swoolebasic/</link>
      <pubDate>Sat, 20 Nov 2021 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/swoole/swoolebasic/</guid>
      <description>本文参考swoole文档 安装 安装过程大概可以参考如下dockerfile: FROMalpine:latest# 替换镜像源并安装基础服务RUN sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&amp;#39; /etc/apk/repositories \ &amp;amp;&amp;amp; apk add php7 php7-fpm php7-opcache php7-curl php7-pdo php7-gd php7-dev php7-mbstring php7-mysqli php7-json vim \ &amp;amp;&amp;amp; apk add gcc g++ make autoconf libc-dev# 挂载VOLUME [&amp;#34;/data&amp;#34;]# 安装swooleCO</description>
    </item>
    
    <item>
      <title>数据结构学习</title>
      <link>https://laurel-he.github.io/datastructure/base/</link>
      <pubDate>Sat, 02 Oct 2021 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/base/</guid>
      <description>参考文章 算法路线图 学习路线图</description>
    </item>
    
    <item>
      <title>pcntl</title>
      <link>https://laurel-he.github.io/php/pcntl/</link>
      <pubDate>Sun, 26 Sep 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/pcntl/</guid>
      <description>pcntl_wait:等待或返回fork的子进程状态</description>
    </item>
    
    <item>
      <title>表达式</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/03expression/</link>
      <pubDate>Sat, 04 Sep 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/03expression/</guid>
      <description></description>
    </item>
    
    <item>
      <title>26. 删除有序数组中的重复项</title>
      <link>https://laurel-he.github.io/acm/leetcode/26removeduplicates/</link>
      <pubDate>Fri, 03 Sep 2021 19:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/26removeduplicates/</guid>
      <description>题目来源26. 删除有序数组中的重复项 题目描述 难度 简单 描述 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并</description>
    </item>
    
    <item>
      <title>36. 有效的数独</title>
      <link>https://laurel-he.github.io/acm/leetcode/36effecttivesudoku/</link>
      <pubDate>Fri, 03 Sep 2021 19:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/36effecttivesudoku/</guid>
      <description>题目来源：36. 有效的数独 描述 请你判断一个9x9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。 数字1-9在每一行只能出现一次。 数字1-9在每一列只能出现一次。 数字1-9在每一个以</description>
    </item>
    
    <item>
      <title>118. 杨辉三角</title>
      <link>https://laurel-he.github.io/acm/leetcode/118pascalstriangle/</link>
      <pubDate>Fri, 03 Sep 2021 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/118pascalstriangle/</guid>
      <description>题目来源：118. 杨辉三角 题目描述 给定一个非负整数numRows，生成「杨辉三角」的前numRows行。 在「杨辉三角」中，每个数是它左上方和右上方的数的和。 示例 1: 输入: numRows = 5 输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] 示例2: 输入: numRows =</description>
    </item>
    
    <item>
      <title>原地算法</title>
      <link>https://laurel-he.github.io/acm/junioralgorithm/in-placealgorithm/</link>
      <pubDate>Fri, 03 Sep 2021 12:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/junioralgorithm/in-placealgorithm/</guid>
      <description>概念 在计算机科学中，一个原地算法（in-place algorithm）是一种使用小的，固定数量的额外之空间来转换资料的算法。 当算法执行时，输入的资料通常会被要输出的部分覆盖掉。 不是原地算法有时候称为非</description>
    </item>
    
    <item>
      <title>软件工程-01基础介绍</title>
      <link>https://laurel-he.github.io/learn/softwareengineering/01basic/</link>
      <pubDate>Wed, 01 Sep 2021 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/learn/softwareengineering/01basic/</guid>
      <description>基础 包含概念介绍 代码，输入数据，输出数据，中间结果数据。 文档：规格说明，设计，法律，财务文档，管理计划，用户手册等。 特点 逻辑抽象 、不会损耗的、可移植的、复杂的、昂贵的 软件工程</description>
    </item>
    
    <item>
      <title>88.合并两个有序数组</title>
      <link>https://laurel-he.github.io/acm/leetcode/88arraymerge/</link>
      <pubDate>Wed, 01 Sep 2021 18:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/88arraymerge/</guid>
      <description>题目来源：88.合并两个有序数组 描述 给你两个按 非递减顺序 排列的整数数组nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。 请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。 注意</description>
    </item>
    
    <item>
      <title>1.两数之和</title>
      <link>https://laurel-he.github.io/acm/leetcode/1towsum/</link>
      <pubDate>Wed, 01 Sep 2021 12:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/1towsum/</guid>
      <description>题目链接：1.两数之和 题目描述 难度 简单 描述 给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 和为目标值 target的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应一</description>
    </item>
    
    <item>
      <title>53.最大子序和</title>
      <link>https://laurel-he.github.io/acm/leetcode/53maxsum/</link>
      <pubDate>Tue, 31 Aug 2021 17:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/53maxsum/</guid>
      <description>题目链接：53.最大子序和 题目描述 难度 简单 描述 给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例 1： 输入：nums = [-2,1,-3,4,-1,2,1,-5,4] 输出：6 解释：连续子数组[4,</description>
    </item>
    
    <item>
      <title>122. 买卖股票的最佳时机</title>
      <link>https://laurel-he.github.io/acm/leetcode/121buyshares/</link>
      <pubDate>Tue, 31 Aug 2021 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/121buyshares/</guid>
      <description>题目链接：122. 买卖股票的最佳时机 题目描述 难度 简单 描述 给定一个数组 prices ，它的第i 个元素prices[i] 表示一支给定股票第 i 天的价格。 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该</description>
    </item>
    
    <item>
      <title>(1)go基础学习-基础概念</title>
      <link>https://laurel-he.github.io/go/basic/gobasic/</link>
      <pubDate>Fri, 27 Aug 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/gobasic/</guid>
      <description>参考文档： go文档 Go 语言教程 可以先看go语言学习路线图， 对大概学习路线有个了解。 基础概念 go语言特色 Go语言在多核并发上拥有原生的设计优势， Go语言从底层原生支持并发，无须第三方库、开发者的编程技巧和</description>
    </item>
    
    <item>
      <title>(2)go基础学习-基本使用</title>
      <link>https://laurel-he.github.io/go/basic/basicuse/</link>
      <pubDate>Fri, 27 Aug 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/basicuse/</guid>
      <description>参考文档： go文档 Go 语言教程 简单的go语言程序 package main import &amp;#34;fmt&amp;#34; func main() { var age, name string = &amp;#34;18&amp;#34;, &amp;#34;Joe&amp;#34; var res = fmt.Sprintf(&amp;#34;my name is %s, and my age is %s&amp;#34;, name, age) fmt.Println(res) } func init() { fmt.Println(&amp;#34;test init&amp;#34;) } func varTest() { var funcName, funcTime string = &amp;#34;varTest&amp;#34;, &amp;#34;now&amp;#34; fmt.Println(funcName + funcTime) } 使用go run来执行 使用go build 来生成二进制文件 go语言</description>
    </item>
    
    <item>
      <title>分组过滤练习题</title>
      <link>https://laurel-he.github.io/acm/%E7%89%9B%E5%AE%A2%E7%BD%91/mysql/having_group/</link>
      <pubDate>Fri, 27 Aug 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/%E7%89%9B%E5%AE%A2%E7%BD%91/mysql/having_group/</guid>
      <description>题目解答 题目来源 牛客网： 分组过滤练习题 参考文章： Mysql中having和where的区别 MySQL聚合函数 MySQL count()函数 题目解析 输入： drop table if exists user_profile; CREATE TABLE user_profile ( id int NOT NULL, device_id int NOT NULL, gender varchar(14) NOT NULL, age int , university varchar(32) NOT NULL, gpa</description>
    </item>
    
    <item>
      <title>kafka学习</title>
      <link>https://laurel-he.github.io/queue/kafka/</link>
      <pubDate>Tue, 27 Jul 2021 09:35:00 +0800</pubDate>
      
      <guid>https://laurel-he.github.io/queue/kafka/</guid>
      <description>环境安装 直接按照文档下载安装。需要注意的是： zookeeper直接使用curl或者wget下载的文件很可能会损坏，导致解压出错。 可以浏览器直接下载，下载好后通过scp传入到服务器中。 安装的时候，pyt</description>
    </item>
    
    <item>
      <title>操作系统（1）-基础和vim操作</title>
      <link>https://laurel-he.github.io/operatingsystem/opratingsystem_01/</link>
      <pubDate>Tue, 20 Jul 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/opratingsystem_01/</guid>
      <description>本系列来源于蓝桥：https://www.lanqiao.cn/courses/2610 同系列文已发布在CSDN 命令行中的shell通配符 字符 含义 * 匹配0或多个字符 ? 匹配任意一个字符 [list] 匹配 list 中的任意单</description>
    </item>
    
    <item>
      <title>操作系统（2）-进程管理</title>
      <link>https://laurel-he.github.io/operatingsystem/opratingsystem_02/</link>
      <pubDate>Tue, 20 Jul 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/opratingsystem_02/</guid>
      <description>蓝桥操作系统课程的学习笔记 top 实时查看进程的状态 top第一行 内容 解释 top 表示当前程序的名称 14:11:28 当前系统的时间 up 231 days, 20:31 表示改机器已经启动了多长时间 1 user 表示当前系统只有一个用户 load average: 0.24, 0.32, 0.19 分别对应1、5、15分钟</description>
    </item>
    
    <item>
      <title>操作系统（3）</title>
      <link>https://laurel-he.github.io/operatingsystem/opratingsystem_03/</link>
      <pubDate>Tue, 20 Jul 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/opratingsystem_03/</guid>
      <description>Linux实现模拟多进程并发执行 示例： #!/bin/bash for((i=0;i&amp;lt;5;i++)) do { sleep 1; echo &amp;#34;$i--&amp;#34;&amp;gt;&amp;gt;aa &amp;amp;&amp;amp; echo &amp;#34;done&amp;#34; }&amp;amp; done wait cat aa | wc -l rm aa 解析 &amp;amp;代表并发执行，wait等待前面执行完了再执行，例如此示例中，如果没有wait很可能还没创建aa文件 Linu</description>
    </item>
    
    <item>
      <title>操作系统（清华大学）1-概述</title>
      <link>https://laurel-he.github.io/operatingsystem/singhuaopsys_01/</link>
      <pubDate>Tue, 20 Jul 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/singhuaopsys_01/</guid>
      <description>教学内容 操作系统的实现 操作系统软件的结构 中断及系统调用 内存管理 进程和线程 处理机调度 进程间通信（同步互斥） 文件系统：组织文件，方便用户的读写查找 I/O子系统：上万种的差异设备连到同一个系统中 什么是操作系</description>
    </item>
    
    <item>
      <title>数据结构学习笔记-1</title>
      <link>https://laurel-he.github.io/datastructure/datastruct_01/</link>
      <pubDate>Tue, 20 Jul 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/datastruct_01/</guid>
      <description>数据结构学习系列都来自于中国大学MOOC上的浙江大学数据结构学习课程。原课程代码全部采用C语言实现，由于本菜平时最擅长（zhihuiyong）使用php，因此所有算法全部翻译成了php实现。课程链接：</description>
    </item>
    
    <item>
      <title>lnmp环境搭建</title>
      <link>https://laurel-he.github.io/operatingsystem/linux/lnmp/</link>
      <pubDate>Sun, 28 Mar 2021 14:03:27 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/linux/lnmp/</guid>
      <description>参考文档： 百度百科:lnmp 问题背景 根据部分5W/1H原则来解释下问题背景（where/when/who基本不用说了,How单独起一个） LNMP环境是什么（What） lnmp环境通常就是指linux+</description>
    </item>
    
    <item>
      <title>第一周_绪论</title>
      <link>https://laurel-he.github.io/datastructure/%E8%A5%BF%E5%AE%89%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E6%85%95%E8%AF%BE/01%E7%BB%AA%E8%AE%BA/</link>
      <pubDate>Tue, 19 Jan 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/datastructure/%E8%A5%BF%E5%AE%89%E7%90%86%E5%B7%A5%E5%A4%A7%E5%AD%A6%E6%85%95%E8%AF%BE/01%E7%BB%AA%E8%AE%BA/</guid>
      <description>本系列来自于中国大学慕课-西安理工大学数据结构 的学习笔记 绪论 数据结构的概念 用计算机解决问题的过程 1 分析具体问题 2 建立数学模型 3 设计算法 4 编写程序 5 上机调试 6 输出结果 数据结构的基本数据 数据 数据是描述客观</description>
    </item>
    
    <item>
      <title>1175. 质数排列</title>
      <link>https://laurel-he.github.io/acm/leetcode/1175primesort/</link>
      <pubDate>Thu, 03 Sep 2020 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/1175primesort/</guid>
      <description>题目来源:1175. 质数排列 题目描述 难度 简单 描述 请你帮忙给从 1 到 n的数设计排列方案，使得所有的「质数」都应该被放在「质数索引」（索引从 1 开始）上；你需要返回可能的方案总数。 让我们一起来回顾一下「质数」</description>
    </item>
    
    <item>
      <title>566. 重塑矩阵</title>
      <link>https://laurel-he.github.io/acm/leetcode/566remouldmatrix/</link>
      <pubDate>Thu, 03 Sep 2020 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/566remouldmatrix/</guid>
      <description>题目来源:566. 重塑矩阵 题目描述 难度 简单 描述 在 MATLAB 中，有一个非常有用的函数 reshape ，它可以将一个m x n 矩阵重塑为另一个大小不同（r x c）的新矩阵，但保留其原始数据。 给你一个由二维数组 mat 表示的m x n 矩阵，以及</description>
    </item>
    
    <item>
      <title>350. 两个数组的交集 II</title>
      <link>https://laurel-he.github.io/acm/leetcode/350arrat/</link>
      <pubDate>Wed, 02 Sep 2020 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/350arrat/</guid>
      <description>题目链接350. 两个数组的交集 II 题目描述 难度 简单 描述 给定两个数组，编写一个函数来计算它们的交集。 示例 1： 输入：nums1 = [1,2,2,1], nums2 = [2,2] 输出：[2,2] 示例 2: 输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4] 输出：[4,9] 说明：</description>
    </item>
    
    <item>
      <title>217.存在重复元素</title>
      <link>https://laurel-he.github.io/acm/leetcode/217repeat/</link>
      <pubDate>Mon, 31 Aug 2020 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/acm/leetcode/217repeat/</guid>
      <description>题目链接：217.存在重复元素 题目描述 难度 简单 描述 给定一个整数数组，判断是否存在重复元素。 如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。 示例 1: 输入: [1,2,3,1] 输出: true 示例</description>
    </item>
    
    <item>
      <title>kustomize使用文档</title>
      <link>https://laurel-he.github.io/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/kustomize01/</link>
      <pubDate>Thu, 21 May 2020 11:00:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/kustomize01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>kubenetes权威指南1-2章</title>
      <link>https://laurel-he.github.io/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/k8s01/</link>
      <pubDate>Sat, 16 May 2020 18:00:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/%E4%BA%91%E5%8E%9F%E7%94%9F/k8s/k8s01/</guid>
      <description>kubenetes是什么 k8s是一个全新的基于容器技术的分布式架构领先方案，一个开放的开发平台，一个完备的分布式系统支撑平台 k8s重要资源对象介绍 Master 概念介绍 k8s中的Master指的是集群控制节点，在</description>
    </item>
    
    <item>
      <title>《第一本docker书》学习笔记01</title>
      <link>https://laurel-he.github.io/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker01/</link>
      <pubDate>Tue, 21 Apr 2020 21:03:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/%E4%BA%91%E5%8E%9F%E7%94%9F/docker/docker01/</guid>
      <description>Docker与配置管理 docker的核心组件 （1）docker客户端和服务器，也称为docker引擎 （2）docker镜像 （3）Registry （4）Docker容器 基本使用 docker info 查看docker程序是</description>
    </item>
    
    <item>
      <title>php多维数组相关处理</title>
      <link>https://laurel-he.github.io/php/multiarr/</link>
      <pubDate>Thu, 16 Apr 2020 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/multiarr/</guid>
      <description>使用场景 在工作中遇到了两次需要把不确定维度的多维数组渲染出来的情况，且还需要修改值和结构，如果使用json-patch会受到限制（需要根据不同的情况打补丁，且由于结构不一定一致，打补丁可能会错误地修改</description>
    </item>
    
    <item>
      <title>awk</title>
      <link>https://laurel-he.github.io/operatingsystem/linux/awk/</link>
      <pubDate>Thu, 27 Feb 2020 18:00:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/linux/awk/</guid>
      <description>参考文档： awk 入门教程 Linux awk命令 知识点 （1）-F指定分隔符，例如：awk -F &#39;:&#39; &#39;{print $1}&#39; demo.log （2）$0代表当前行，即所有内容，例如：awk &#39;{print $0}&#39; demo.log将会输出demo.log的所有内容 （3）$ + 数字表示</description>
    </item>
    
    <item>
      <title>linux命令大全</title>
      <link>https://laurel-he.github.io/operatingsystem/linuxuse/</link>
      <pubDate>Thu, 27 Feb 2020 18:00:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/linuxuse/</guid>
      <description>文件操作 cat 描述 查看文件内容 参数 -n 或 –number 由 1 开始对所有输出的行数编号 -b 或 –number-nonblank 和 -n 相似，只不过对于空白行不编号 -s 或 –squeeze-blank 当遇到有连续两行以上的空</description>
    </item>
    
    <item>
      <title>linux基础入门</title>
      <link>https://laurel-he.github.io/operatingsystem/linuxbase/</link>
      <pubDate>Thu, 27 Feb 2020 18:00:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/operatingsystem/linuxbase/</guid>
      <description>学习心得，来自于蓝桥Linux基础入门 用户相关 查看当前用户 whoami:查看当前用户名 who am i:可以列出用户名，当前登录的伪终端以及当前伪终端的启动时间等 注意事项 在有些情况下who am i或者who mom lik</description>
    </item>
    
    <item>
      <title>计算相关</title>
      <link>https://laurel-he.github.io/post/codecollect/</link>
      <pubDate>Tue, 25 Feb 2020 20:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/post/codecollect/</guid>
      <description>1 计算矩形是否相交 描述 给定两个矩形的左上角起始点坐标和矩形的宽，高，计算这两个矩形是否相交 分析 1 矩形1左上角坐标p1,右下角坐标p2,矩形2左上角坐标p3,右下角坐标p4 2 M点坐标为P1与P3点在X方</description>
    </item>
    
    <item>
      <title>有用的代码段-php篇</title>
      <link>https://laurel-he.github.io/php/usefulcode1/</link>
      <pubDate>Thu, 16 Jan 2020 12:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/usefulcode1/</guid>
      <description>分步骤执行 &amp;lt;?php /** * @param mixed ...$args * @return bool * @throws Exception */ public function stepRun(...$args): bool { $count = $args[0]; $method = $args[1]; $step = array_key_exists(2, $args) ? $args[2] : 10; $limit = array_key_exists(3, $args) ? $args[3] : 10; $param = array_key_exists(4, $args) ? $args[4] : &amp;#39;&amp;#39;; $stepCount = ceil($count / $step); for ($nowStep = 0; $nowStep &amp;lt; $stepCount; $nowStep ++) { $this-&amp;gt;$method($limit, $nowStep * $step, $param); sleep(1); } sleep(1); return true; } ?&amp;gt;使用方法 &amp;lt;?php $this-&amp;gt;stepRun($groupChangeCount, &amp;#39;loopGetData&amp;#39;, 30, 30); ?&amp;gt;分析</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://laurel-he.github.io/designpattern/phpallpattern/design_singleton/</link>
      <pubDate>Tue, 29 Oct 2019 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/designpattern/phpallpattern/design_singleton/</guid>
      <description>概念介绍 情景介绍 一个类只需要被实例化一次，但是不应该由调用方来判断是否被实例化过 基础介绍 所有类都有构造方法，不编码则系统默认生成空的构造方法，若有显示定义的构造方法，默认的构造方法就会失效。 类把构造方</description>
    </item>
    
    <item>
      <title>代码整洁之道1-9章</title>
      <link>https://laurel-he.github.io/post/cleancode/</link>
      <pubDate>Mon, 07 Oct 2019 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/post/cleancode/</guid>
      <description>需求描述 第一章：整洁代码 要有代码 代码呈现了需求的细节，将需求明确到机器可以执行的细节程度 糟糕的代码 不要产生糟糕的、混乱的代码，勒布朗法则：稍后等于永不 混乱的代价 花时间保持代码整洁不但有关效率，还有关生</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://laurel-he.github.io/designpattern/phpallpattern/singlemode/</link>
      <pubDate>Sun, 06 Oct 2019 10:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/designpattern/phpallpattern/singlemode/</guid>
      <description>基础介绍 概念介绍 作为对象的创建模式，单例模式确保某一个类只有一个实例，并且对外提供这个全局实例的访问入口。它不会创建实例副本，而是会向单例类内部存储的实例返回一个引用。 单例模式三要素 需要一个保存类的唯</description>
    </item>
    
    <item>
      <title>工作经验总结</title>
      <link>https://laurel-he.github.io/post/work/</link>
      <pubDate>Sat, 05 Oct 2019 17:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/post/work/</guid>
      <description>工作经验 （1）学会控制情绪</description>
    </item>
    
    <item>
      <title>代码大全</title>
      <link>https://laurel-he.github.io/post/codecomplate_01/</link>
      <pubDate>Sat, 05 Oct 2019 10:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/post/codecomplate_01/</guid>
      <description>前期准备 前期准备的重要性 不要立即开始写代码，要做好必要的需求分析和架构设计，写好需求文档和技术文档，防止浪费时间和精力制造错误的东西 需求核对表 针对功能需求： 1．是否详细定义了系统的全部输入，包括其来源</description>
    </item>
    
    <item>
      <title>c语言基础介绍</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/basic/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/basic/</guid>
      <description>本系列来自于中国大学MOOC的 程序设计入门C语言 学习视频总结 基础 学习程序设计的目的 通过学习程序设计，理解计算机如何工作，计算机擅长做什么，不擅长做什么。 计算机如何解决问题？ 告诉计算机的步骤，它会一步一</description>
    </item>
    
    <item>
      <title>第一周_开始编程</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/01first/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/01first/</guid>
      <description>本系列是学习总结：中国大学MOOC的 程序设计入门C语言 第一个程序 #include &amp;lt;stdio.h&amp;gt; int main(int argc, char ** argv) { printf(&amp;#34;Hello Word\n&amp;#34;); int i = 0; scanf(&amp;#34;%d&amp;#34;, &amp;amp;i); printf(&amp;#34;The res is: %d&amp;#34;, i + 10); return 0; } 换行和空格不意味着任何问题。 编程工具可以使用codeblocks或原课件中推荐的是</description>
    </item>
    
    <item>
      <title>第三周_循环与判断</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/03%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%88%A4%E6%96%AD/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/03%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%88%A4%E6%96%AD/</guid>
      <description>本系列是学习总结：中国大学MOOC的程序设计入门C语言 计算时间差 第二周使用先计算分钟差值，然后使用了除法获取小时，取余获取分钟的方式。 采用直接计算的方式来获取，代码如下： #include &amp;lt;stdio.h&amp;gt; int main() { int hour1, minute1; int hour2, minute2; prin</description>
    </item>
    
    <item>
      <title>第二周_计算</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/02%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/02%E8%AE%A1%E7%AE%97/</guid>
      <description>本系列是学习总结：中国大学MOOC的程序设计入门C语言 c语言32个关键字 类型 包含关键字 类型说明保留字 int,long,short,float,double,char,unsigned,signed,const,void,volatile,enum,struct,union 语句定义保留字 if,else,goto,switch,case,do,while,for,continue,break,return,default,typedef 存储类说明保留字 auto,register,extern,static 长度运算符保留字 sizeof 变量 如何输入数字运行？ 1 需要有个地方可以放置 2</description>
    </item>
    
    <item>
      <title>react单元测试</title>
      <link>https://laurel-he.github.io/frontend/react/reactunit/</link>
      <pubDate>Mon, 29 Jul 2019 10:40:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/frontend/react/reactunit/</guid>
      <description>测试 ESLint 代码检查（分析JavaScript代码）,JSHint和JSLint是用于分析JavaScript代码的原生工具，并且可以为用户提供格式化代码的反馈意见；</description>
    </item>
    
    <item>
      <title>PHP常见算法</title>
      <link>https://laurel-he.github.io/php/phpalg/</link>
      <pubDate>Mon, 08 Apr 2019 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/phpalg/</guid>
      <description>排序算法 1 冒泡排序 解析 从零开始，每一位和剩余位数比较，如果大于（小于）则交换，最后一位最终会是最大（最小）的。 代码 &amp;lt;?php $arr = [2,3,1,4,7,6,9]; var_dump(bubbleSort($arr)); function bubbleSort($arr) { $len = count($arr); for($i = 0;$i &amp;lt; $len; $i++) { for($j = $len - 1;$j &amp;gt; $i;$j--) { if($arr[$j] &amp;lt; $arr[$j-1]) { $tmp = $arr[$j]; $arr[$j ] = $arr[$j - 1]; $arr[$j - 1] =</description>
    </item>
    
    <item>
      <title>安装php sniffer</title>
      <link>https://laurel-he.github.io/php/phppsr/</link>
      <pubDate>Sun, 07 Apr 2019 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/phppsr/</guid>
      <description>安装pear（参考文档：https://www.cnblogs.com/huangbx/p/php_codesniffer.html） 从以下网址：http://pear.php.net/go-pear</description>
    </item>
    
    <item>
      <title>mysql必知必会学习笔记-2-检索数据</title>
      <link>https://laurel-he.github.io/database/mysql/mysqlmustknown_02/</link>
      <pubDate>Wed, 03 Apr 2019 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/database/mysql/mysqlmustknown_02/</guid>
      <description>select语句 -- 简单的查询 selectprod_namefromta_name;-- 查询几个列 selectprod_id,prod_namefromtb_name;-- 查询所有列，一般不建议，检索不需要的列通常会降低检索和应用程序的性能 select*fromtb_name;-- 只返回不同的值 selectdistinctxxx_idfromtb_name;-- 返回前5行 selectprod_namefromtb_namelimit5;-- 限制开始行和行数，例如从第3行开始，返回5行 selectprod_namefromtb_namelimit3,5;-- 从Mysql5</description>
    </item>
    
    <item>
      <title>mysql必知必会学习笔记-1-基础概念</title>
      <link>https://laurel-he.github.io/database/mysql/mysqlmustknown_01/</link>
      <pubDate>Tue, 02 Apr 2019 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/database/mysql/mysqlmustknown_01/</guid>
      <description>基础复习 本书大概通读了一遍，内容几乎都是我知道或者学过的，但是我依然想再详细阅读一遍，并且跟着书中的示例来实际操作下，打牢基础。以下是学习笔记。 概念 定义 数据库 数据库是用来保存有组织的数据的容器 表 某种特</description>
    </item>
    
    <item>
      <title>一些php知识</title>
      <link>https://laurel-he.github.io/php/laurel/</link>
      <pubDate>Thu, 28 Mar 2019 14:00:40 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/laurel/</guid>
      <description>argc和argv $argv代表传递的参数,$argc代表参数个数（相对路径+传的参数） 示例 &amp;lt;?php echo $argv[0]; echo &amp;#34;\n&amp;#34;; var_dump($argv[1]); echo &amp;#34;\n&amp;#34;; var_dump(intval($argv[2])); echo &amp;#34;\n&amp;#34;; echo $argv[3]; echo &amp;#34;\n&amp;#34;; echo $argc;</description>
    </item>
    
    <item>
      <title>python数据结构之集合</title>
      <link>https://laurel-he.github.io/python/pythonset/</link>
      <pubDate>Fri, 15 Mar 2019 13:52:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonset/</guid>
      <description>介绍 集合是一个无序的不重复的元素序列 操作 创建集合： {}或set()，创建一个空集合必须用set()，{}创建空字典(set(&amp;ldquo;asdgf&amp;rdquo;)会创建[&amp;lsquo;a&amp;rsquo</description>
    </item>
    
    <item>
      <title>python数据结构之列表</title>
      <link>https://laurel-he.github.io/python/pythonlist/</link>
      <pubDate>Fri, 15 Mar 2019 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonlist/</guid>
      <description>介绍 可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型 操作 （1）取值： list[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素） （2）更新列表 添加元素：append&amp;ndash;&amp;gt;</description>
    </item>
    
    <item>
      <title>python数据结构</title>
      <link>https://laurel-he.github.io/python/pythonstructure/</link>
      <pubDate>Fri, 15 Mar 2019 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonstructure/</guid>
      <description>列表(List) python list deque双向队列 python deque 集合 python set</description>
    </item>
    
    <item>
      <title>python数据结构之双向队列</title>
      <link>https://laurel-he.github.io/python/pythondeque/</link>
      <pubDate>Fri, 15 Mar 2019 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythondeque/</guid>
      <description>介绍 两端都可以操作的序列 基本操作 创建： import collections d = collections.deque() 往右边添加一个元素： d.append(1) d.append(&amp;lsquo;adc&amp;rsquo;) 往左添加一个元素： d.appendleft(3) 清空队列： d.clear 浅拷贝： d1 = d.copy() 返回指定元素的出现次数： d.count(1) 从队列右边扩展一个列表的元素： d.extend([3,4,5]) 从队列左边扩展一个列表的</description>
    </item>
    
    <item>
      <title>补充python基础知识</title>
      <link>https://laurel-he.github.io/python/python_base/</link>
      <pubDate>Thu, 14 Mar 2019 15:26:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python_base/</guid>
      <description>##python运算符 幂 返回x的y次幂 10**20 取整除 //:返回商的整数部分，向下取整</description>
    </item>
    
    <item>
      <title>python Generators</title>
      <link>https://laurel-he.github.io/python/generators/</link>
      <pubDate>Thu, 14 Mar 2019 14:41:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/generators/</guid>
      <description>##迭代器Iterator 迭代器是一个可以让程序员遍历一个容器的对象，一个迭代器在遍历并读取一个容器的数据元素时不会执行一个迭代。 迭代器三个部分 可迭代对象 迭代器 迭代 可迭代对象 python中的任意对象，</description>
    </item>
    
    <item>
      <title>python debugger</title>
      <link>https://laurel-he.github.io/python/python_debugger/</link>
      <pubDate>Thu, 14 Mar 2019 11:48:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python_debugger/</guid>
      <description>##准备 来源 http://python.jobbole.com/81184/ 初始代码 import sys def add(num1=0, num2=0): return int(num1) + int(num2) def sub(num1=0, num2=0): return int(num1) - int(num2) def main(): #Assuming our inputs are valid numbers print sys.argv addition = add(sys.argv[1], sys.argv[2]) print addition subtraction = sub(sys.argv[1], sys.argv[2]) print subtraction if __name__ == &amp;#39;__main__&amp;#39;: main() 基础用法 import pdb pdb.set_trace() //设置断点 在程序中添加断点 import pdb import sys def add(num1=0, num2=0): return int(num1) + int(num2) def sub(num1=0, num2=0): return int(num1) - int(num2) def main(): #Assuming our inputs are valid</description>
    </item>
    
    <item>
      <title>python进阶</title>
      <link>https://laurel-he.github.io/python/python/</link>
      <pubDate>Thu, 14 Mar 2019 10:36:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python/</guid>
      <description>*args和**kwargs *args *args和**kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数 举例 输入： def test_var_args(f_arg, *argv): print(&amp;#34;first normal arg:&amp;#34;, f_arg) for arg in argv: print(&amp;#34;another arg through *argv:&amp;#34;, arg) test_var_args(&amp;#39;yasoob&amp;#39;, &amp;#39;python&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;test&amp;#39;) 输出： first normal arg: yasoob another arg through *argv: python another arg through *argv: eggs another arg through</description>
    </item>
    
    <item>
      <title>python100例学习笔记</title>
      <link>https://laurel-he.github.io/python/20190202/</link>
      <pubDate>Sat, 02 Feb 2019 13:25:21 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/20190202/</guid>
      <description>四个数组成不重复三位数 描述 有四个数字，1,2,3,4，能组成多少个不重复的三位数 思考 原文分析：将所有的数字排列组合后去掉不满足条件的列 代码 num = 1; for i in range(1,5): for j in range(1,5): for k in range(1,5): if(i != k) and (i != j) and (j != k): print i,j,k num = num</description>
    </item>
    
    <item>
      <title>各种奇怪的坑</title>
      <link>https://laurel-he.github.io/php/2019_01_01/</link>
      <pubDate>Fri, 01 Feb 2019 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/2019_01_01/</guid>
      <description>1 strtotime() 描述 获取上个月的时间可以是date(&amp;lsquo;Y-m-d&amp;rsquo;,strtotime(&#39;-1 month&#39;));如果今天是31号而上个月没有31号，就会直接输出这个月1号； 解决办法 使用la</description>
    </item>
    
    <item>
      <title>fastadmin自定义角色组</title>
      <link>https://laurel-he.github.io/php/test-my-site/</link>
      <pubDate>Thu, 31 Jan 2019 17:36:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/test-my-site/</guid>
      <description>之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限</description>
    </item>
    
  </channel>
</rss>
