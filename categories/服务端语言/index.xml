<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务端语言 on xiaoJiao</title>
    <link>https://laurel-he.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%AD%E8%A8%80/</link>
    <description>Recent content in 服务端语言 on xiaoJiao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 11 Apr 2019 15:23:44 +0000</lastBuildDate><atom:link href="https://laurel-he.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel 日志系统</title>
      <link>https://laurel-he.github.io/php/laravel/log/</link>
      <pubDate>Thu, 11 Apr 2019 15:23:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/laravel/log/</guid>
      <description>1 （自己摸索版本）5.2 1 定义路径 .env配置文件添加日志路径，例如 LOG_PATH=/tmp/paytest 2 启动文件添加日志路径 $app-&amp;gt;configureMonologUsing(function($logger){ $logger-&amp;gt;pushHandler(new \Monolog\Handler\RotatingFileHandler(env(&amp;#39;LOG_PATH&amp;#39;).&amp;#39;.log&amp;#39;), 10); return $logger; }); 2 官方文档 1 异常处理 介绍 当您启动一个新的 Laravel 项目时，错误和异常处理就已为您配置。 应用程序触发的所</description>
    </item>
    
    <item>
      <title>重新实现monthly步骤</title>
      <link>https://laurel-he.github.io/private/monthly/</link>
      <pubDate>Mon, 25 Mar 2019 09:41:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/private/monthly/</guid>
      <description>1 bi新建已收、已付、应收、应付表 CREATETABLE`order_product_set_pay`(`id`int(10)unsignedNOTNULL,`order_product_id`int(10)unsignedNOTNULL,`parent_order_product_id`int(10)unsignedDEFAULT&amp;#39;0&amp;#39;COMMENT&amp;#39;parent order_product_id&amp;#39;,`has_settlement`decimal(10,2)NOTNULLDEFAULT&amp;#39;0.00&amp;#39;,`should_settlement`decimal(10,2)NOTNULLDEFAULT&amp;#39;0.00&amp;#39;,`has_pay`decimal(10,2)NOTNULLDEFAULT&amp;#39;0.00&amp;#39;,`should_pay`decimal(10,2)NOTNULLDEFAULT&amp;#39;0.00&amp;#39;,`settlement_pay_time`timestampNOTNULLDEFAULT&amp;#39;0000-00-00 00:00:00&amp;#39;,`pay_pay_status`varchar(255)NOTNULLDEFAULT&amp;#39;Pending&amp;#39;,`pay_pay_time`timestampNOTNULLDEFAULT&amp;#39;0000-00-00 00:00:00&amp;#39;,PRIMARYKEY(`id`))ENGINE=InnoDBDEFAULTCHARSET=utf8;altertable`order_product_set_pay`dropprimarykey;altertable`order_product_set_pay`add`settlement_id`int(10)unsignedNOTNULL;2 从bi表中查询数据 1 已收 （总收）/比例 比例 = mysql查询优化 优化结果 SELECTop.order_product_id,op.parent_order_pr</description>
    </item>
    
    <item>
      <title>python数据结构之集合</title>
      <link>https://laurel-he.github.io/python/pythonset/</link>
      <pubDate>Fri, 15 Mar 2019 13:52:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonset/</guid>
      <description>介绍 集合是一个无序的不重复的元素序列 操作 创建集合： {}或set()，创建一个空集合必须用set()，{}创建空字典(set(&amp;ldquo;asdgf&amp;rdquo;)会创建[&amp;lsquo;a&amp;rsquo</description>
    </item>
    
    <item>
      <title>python数据结构之列表</title>
      <link>https://laurel-he.github.io/python/pythonlist/</link>
      <pubDate>Fri, 15 Mar 2019 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonlist/</guid>
      <description>介绍 可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型 操作 （1）取值： list[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素） （2）更新列表 添加元素：append&amp;ndash;&amp;gt;</description>
    </item>
    
    <item>
      <title>python数据结构</title>
      <link>https://laurel-he.github.io/python/pythonstructure/</link>
      <pubDate>Fri, 15 Mar 2019 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonstructure/</guid>
      <description>列表(List) python list deque双向队列 python deque 集合 python set</description>
    </item>
    
    <item>
      <title>python数据结构之双向队列</title>
      <link>https://laurel-he.github.io/python/pythondeque/</link>
      <pubDate>Fri, 15 Mar 2019 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythondeque/</guid>
      <description>介绍 两端都可以操作的序列 基本操作 创建： import collections d = collections.deque() 往右边添加一个元素： d.append(1) d.append(&amp;lsquo;adc&amp;rsquo;) 往左添加一个元素： d.appendleft(3) 清空队列： d.clear 浅拷贝： d1 = d.copy() 返回指定元素的出现次数： d.count(1) 从队列右边扩展一个列表的元素： d.extend([3,4,5]) 从队列左边扩展一个列表的</description>
    </item>
    
    <item>
      <title>补充python基础知识</title>
      <link>https://laurel-he.github.io/python/python_base/</link>
      <pubDate>Thu, 14 Mar 2019 15:26:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python_base/</guid>
      <description>##python运算符 幂 返回x的y次幂 10**20 取整除 //:返回商的整数部分，向下取整</description>
    </item>
    
    <item>
      <title>python debugger</title>
      <link>https://laurel-he.github.io/python/python_debugger/</link>
      <pubDate>Thu, 14 Mar 2019 11:48:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python_debugger/</guid>
      <description>##准备 来源 http://python.jobbole.com/81184/ 初始代码 import sys def add(num1=0, num2=0): return int(num1) + int(num2) def sub(num1=0, num2=0): return int(num1) - int(num2) def main(): #Assuming our inputs are valid numbers print sys.argv addition = add(sys.argv[1], sys.argv[2]) print addition subtraction = sub(sys.argv[1], sys.argv[2]) print subtraction if __name__ == &amp;#39;__main__&amp;#39;: main() 基础用法 import pdb pdb.set_trace() //设置断点 在程序中添加断点 import pdb import sys def add(num1=0, num2=0): return int(num1) + int(num2) def sub(num1=0, num2=0): return int(num1) - int(num2) def main(): #Assuming our inputs are valid</description>
    </item>
    
    <item>
      <title>python进阶</title>
      <link>https://laurel-he.github.io/python/python/</link>
      <pubDate>Thu, 14 Mar 2019 10:36:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python/</guid>
      <description>*args和**kwargs *args *args和**kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数 举例 输入： def test_var_args(f_arg, *argv): print(&amp;#34;first normal arg:&amp;#34;, f_arg) for arg in argv: print(&amp;#34;another arg through *argv:&amp;#34;, arg) test_var_args(&amp;#39;yasoob&amp;#39;, &amp;#39;python&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;test&amp;#39;) 输出： first normal arg: yasoob another arg through *argv: python another arg through *argv: eggs another arg through</description>
    </item>
    
    <item>
      <title>python100例学习笔记</title>
      <link>https://laurel-he.github.io/python/20190202/</link>
      <pubDate>Sat, 02 Feb 2019 13:25:21 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/20190202/</guid>
      <description>四个数组成不重复三位数 描述 有四个数字，1,2,3,4，能组成多少个不重复的三位数 思考 原文分析：将所有的数字排列组合后去掉不满足条件的列 代码 num = 1; for i in range(1,5): for j in range(1,5): for k in range(1,5): if(i != k) and (i != j) and (j != k): print i,j,k num = num</description>
    </item>
    
    <item>
      <title>fastadmin自定义角色组</title>
      <link>https://laurel-he.github.io/php/test-my-site/</link>
      <pubDate>Thu, 31 Jan 2019 17:36:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/test-my-site/</guid>
      <description>之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限</description>
    </item>
    
  </channel>
</rss>
