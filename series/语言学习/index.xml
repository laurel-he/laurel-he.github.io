<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>语言学习 on xiaoJiao</title>
    <link>https://laurel-he.github.io/series/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in 语言学习 on xiaoJiao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 02 Aug 2022 09:47:00 +0000</lastBuildDate><atom:link href="https://laurel-he.github.io/series/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>一个普通go项目的流程</title>
      <link>https://laurel-he.github.io/go/pipeline/</link>
      <pubDate>Tue, 02 Aug 2022 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/pipeline/</guid>
      <description>需求概述 假设目前有一个普通的项目，一个图书馆管理系统，后端语言使用go，前端使用react，需要做到前后端分离。 数据库可以使用mongoDB或者mysql等等随便什么开源的库，但明确要求，假设这是一个</description>
    </item>
    
    <item>
      <title>测试函数</title>
      <link>https://laurel-he.github.io/go/test/testfunction/</link>
      <pubDate>Mon, 25 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/test/testfunction/</guid>
      <description>格式要求 引入testing包 每个测试函数必须导入testing包。测试函数有如下的签名： func TestName(t *testing.T) { // ... } 测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头： 例如： func TestSin(t *testing.T) { /* ... */ } func TestCos(t *testing.T) { /*</description>
    </item>
    
    <item>
      <title>测试</title>
      <link>https://laurel-he.github.io/go/test/basictest/</link>
      <pubDate>Sun, 24 Apr 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/test/basictest/</guid>
      <description>*_test.go文件中，三种函数类型 测试函数、基准测试(benchmark)函数、示例函数 测试函数 一个测试函数是以Test为函数名前缀的函数，用于测试程序的一些逻辑行为是否正确； go test命令会调用</description>
    </item>
    
    <item>
      <title>go语言中一些标志的含义</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/mark/</link>
      <pubDate>Tue, 08 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/mark/</guid>
      <description>符号 符号 含义 解释 示例 := 短变量声明(blank identifier) 定义一个或多个变量并根据它们的初始值为这些变量赋予适当类型的语句 i := 1 _ 空标识符(blank identifier) 空标识符可用于任何语法需要变量名但程序逻辑不需要的时候 for _, arg</description>
    </item>
    
    <item>
      <title>go语言圣经-(1)入门-GIF动画</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/01_2/</link>
      <pubDate>Tue, 08 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/01_2/</guid>
      <description>GIF动画 生成利萨如图形的gif动画。 // Lissajous generates GIF animations of random Lissajous figures. package main import ( &amp;#34;image&amp;#34; &amp;#34;image/color&amp;#34; &amp;#34;image/gif&amp;#34; &amp;#34;io&amp;#34; &amp;#34;math&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;os&amp;#34; ) var palette = []color.Color{color.White, color.Black} const ( whiteIndex = 0 // first color in palette blackIndex = 1 // next color in palette ) func main() { // The sequence of images is deterministic unless we seed // the pseudo-random number generator using the current time. // Thanks to Randall McPherson for pointing out the omission. rand.Seed(time.Now().UTC().UnixNano()) lissajous(os.Stdout) } func</description>
    </item>
    
    <item>
      <title>go语言圣经-(1)入门-命令行参数、查找重复行</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/01_1/</link>
      <pubDate>Mon, 07 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/01_1/</guid>
      <description>基本介绍 可以参考此文章：https://docs.hacknode.org/gopl-zh/ch0/ch0-02.html 基础使用 查看go版本 go version 引入代码 需要在环境变量中添加GOPATH目录，然后使用</description>
    </item>
    
    <item>
      <title>go语言圣经-(2)入门-程序结构</title>
      <link>https://laurel-he.github.io/go/basic/thegoprograming/02/</link>
      <pubDate>Mon, 07 Mar 2022 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/thegoprograming/02/</guid>
      <description>2.1命名 Go语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循一个简单的命名规则：一个名字必须以一个字母（Unicode字母）或下划线开头，后面可以跟任意数量的字母、数字或下</description>
    </item>
    
    <item>
      <title>使用go编写webassembly</title>
      <link>https://laurel-he.github.io/go/webassembly_go_1/</link>
      <pubDate>Fri, 10 Dec 2021 12:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/webassembly_go_1/</guid>
      <description>使用go编写webassembly并在浏览器执行 参考博客 用go写WebAssembly入门 下载安装 go 编写测试文件hello.go package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello World!&amp;#34;) } 生成wasm文件 GOARCH=wasm GOOS=js go build -o hello.wasm hello.go 在windows下需要</description>
    </item>
    
    <item>
      <title>go语言学习</title>
      <link>https://laurel-he.github.io/go/summary/</link>
      <pubDate>Thu, 25 Nov 2021 20:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/summary/</guid>
      <description>参考文档： go文档 Go 语言教程 前言 知识查漏补缺第一站，学习go语言。 我去年曾经大概看过go语言的一些语法，但并没有实际操作过，因此，这里假定我需要做一个小的电商平台，一步一步来实现。 步骤 首先大概拆分下需</description>
    </item>
    
    <item>
      <title>laravel配置params选项如MYSQL_ATTR_USE_BUFFERED_QUERY等</title>
      <link>https://laurel-he.github.io/post/laravel_err_01/</link>
      <pubDate>Thu, 30 Sep 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/post/laravel_err_01/</guid>
      <description>以下内容已同步至CSDN 绝了，laravel使用的是illuminate/database作为orm，我们用的swoole，在使用过程中报了如下错误： SQLSTATE[HY000]: General error: 2014 Cannot execute queries while other unbuffered queries are active. Consider using PDOStatement::fetchAll() 这个错误在网上一搜</description>
    </item>
    
    <item>
      <title>pcntl</title>
      <link>https://laurel-he.github.io/php/pcntl/</link>
      <pubDate>Sun, 26 Sep 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/pcntl/</guid>
      <description>pcntl_wait:等待或返回fork的子进程状态</description>
    </item>
    
    <item>
      <title>表达式</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/03expression/</link>
      <pubDate>Sat, 04 Sep 2021 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/03expression/</guid>
      <description></description>
    </item>
    
    <item>
      <title>(1)go基础学习-基础概念</title>
      <link>https://laurel-he.github.io/go/basic/gobasic/</link>
      <pubDate>Fri, 27 Aug 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/gobasic/</guid>
      <description>参考文档： go文档 Go 语言教程 可以先看go语言学习路线图， 对大概学习路线有个了解。 基础概念 go语言特色 Go语言在多核并发上拥有原生的设计优势， Go语言从底层原生支持并发，无须第三方库、开发者的编程技巧和</description>
    </item>
    
    <item>
      <title>(2)go基础学习-基本使用</title>
      <link>https://laurel-he.github.io/go/basic/basicuse/</link>
      <pubDate>Fri, 27 Aug 2021 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/go/basic/basicuse/</guid>
      <description>参考文档： go文档 Go 语言教程 简单的go语言程序 package main import &amp;#34;fmt&amp;#34; func main() { var age, name string = &amp;#34;18&amp;#34;, &amp;#34;Joe&amp;#34; var res = fmt.Sprintf(&amp;#34;my name is %s, and my age is %s&amp;#34;, name, age) fmt.Println(res) } func init() { fmt.Println(&amp;#34;test init&amp;#34;) } func varTest() { var funcName, funcTime string = &amp;#34;varTest&amp;#34;, &amp;#34;now&amp;#34; fmt.Println(funcName + funcTime) } 使用go run来执行 使用go build 来生成二进制文件 go语言</description>
    </item>
    
    <item>
      <title>php多维数组相关处理</title>
      <link>https://laurel-he.github.io/php/multiarr/</link>
      <pubDate>Thu, 16 Apr 2020 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/multiarr/</guid>
      <description>使用场景 在工作中遇到了两次需要把不确定维度的多维数组渲染出来的情况，且还需要修改值和结构，如果使用json-patch会受到限制（需要根据不同的情况打补丁，且由于结构不一定一致，打补丁可能会错误地修改</description>
    </item>
    
    <item>
      <title>有用的代码段-php篇</title>
      <link>https://laurel-he.github.io/php/usefulcode1/</link>
      <pubDate>Thu, 16 Jan 2020 12:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/usefulcode1/</guid>
      <description>分步骤执行 &amp;lt;?php /** * @param mixed ...$args * @return bool * @throws Exception */ public function stepRun(...$args): bool { $count = $args[0]; $method = $args[1]; $step = array_key_exists(2, $args) ? $args[2] : 10; $limit = array_key_exists(3, $args) ? $args[3] : 10; $param = array_key_exists(4, $args) ? $args[4] : &amp;#39;&amp;#39;; $stepCount = ceil($count / $step); for ($nowStep = 0; $nowStep &amp;lt; $stepCount; $nowStep ++) { $this-&amp;gt;$method($limit, $nowStep * $step, $param); sleep(1); } sleep(1); return true; } ?&amp;gt;使用方法 &amp;lt;?php $this-&amp;gt;stepRun($groupChangeCount, &amp;#39;loopGetData&amp;#39;, 30, 30); ?&amp;gt;分析</description>
    </item>
    
    <item>
      <title>第一周_开始编程</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/01first/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/01first/</guid>
      <description>本系列是学习总结：中国大学MOOC的 程序设计入门C语言 第一个程序 #include &amp;lt;stdio.h&amp;gt; int main(int argc, char ** argv) { printf(&amp;#34;Hello Word\n&amp;#34;); int i = 0; scanf(&amp;#34;%d&amp;#34;, &amp;amp;i); printf(&amp;#34;The res is: %d&amp;#34;, i + 10); return 0; } 换行和空格不意味着任何问题。 编程工具可以使用codeblocks或原课件中推荐的是</description>
    </item>
    
    <item>
      <title>第三周_循环与判断</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/03%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%88%A4%E6%96%AD/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/03%E5%BE%AA%E7%8E%AF%E4%B8%8E%E5%88%A4%E6%96%AD/</guid>
      <description>本系列是学习总结：中国大学MOOC的程序设计入门C语言 计算时间差 第二周使用先计算分钟差值，然后使用了除法获取小时，取余获取分钟的方式。 采用直接计算的方式来获取，代码如下： #include &amp;lt;stdio.h&amp;gt; int main() { int hour1, minute1; int hour2, minute2; prin</description>
    </item>
    
    <item>
      <title>第二周_计算</title>
      <link>https://laurel-he.github.io/corc&#43;&#43;/c/02%E8%AE%A1%E7%AE%97/</link>
      <pubDate>Wed, 04 Sep 2019 16:34:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/corc&#43;&#43;/c/02%E8%AE%A1%E7%AE%97/</guid>
      <description>本系列是学习总结：中国大学MOOC的程序设计入门C语言 c语言32个关键字 类型 包含关键字 类型说明保留字 int,long,short,float,double,char,unsigned,signed,const,void,volatile,enum,struct,union 语句定义保留字 if,else,goto,switch,case,do,while,for,continue,break,return,default,typedef 存储类说明保留字 auto,register,extern,static 长度运算符保留字 sizeof 变量 如何输入数字运行？ 1 需要有个地方可以放置 2</description>
    </item>
    
    <item>
      <title>PHP常见算法</title>
      <link>https://laurel-he.github.io/php/phpalg/</link>
      <pubDate>Mon, 08 Apr 2019 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/phpalg/</guid>
      <description>排序算法 1 冒泡排序 解析 从零开始，每一位和剩余位数比较，如果大于（小于）则交换，最后一位最终会是最大（最小）的。 代码 &amp;lt;?php $arr = [2,3,1,4,7,6,9]; var_dump(bubbleSort($arr)); function bubbleSort($arr) { $len = count($arr); for($i = 0;$i &amp;lt; $len; $i++) { for($j = $len - 1;$j &amp;gt; $i;$j--) { if($arr[$j] &amp;lt; $arr[$j-1]) { $tmp = $arr[$j]; $arr[$j ] = $arr[$j - 1]; $arr[$j - 1] =</description>
    </item>
    
    <item>
      <title>安装php sniffer</title>
      <link>https://laurel-he.github.io/php/phppsr/</link>
      <pubDate>Sun, 07 Apr 2019 18:27:44 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/phppsr/</guid>
      <description>安装pear（参考文档：https://www.cnblogs.com/huangbx/p/php_codesniffer.html） 从以下网址：http://pear.php.net/go-pear</description>
    </item>
    
    <item>
      <title>一些php知识</title>
      <link>https://laurel-he.github.io/php/laurel/</link>
      <pubDate>Thu, 28 Mar 2019 14:00:40 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/laurel/</guid>
      <description>argc和argv $argv代表传递的参数,$argc代表参数个数（相对路径+传的参数） 示例 &amp;lt;?php echo $argv[0]; echo &amp;#34;\n&amp;#34;; var_dump($argv[1]); echo &amp;#34;\n&amp;#34;; var_dump(intval($argv[2])); echo &amp;#34;\n&amp;#34;; echo $argv[3]; echo &amp;#34;\n&amp;#34;; echo $argc;</description>
    </item>
    
    <item>
      <title>python数据结构之集合</title>
      <link>https://laurel-he.github.io/python/pythonset/</link>
      <pubDate>Fri, 15 Mar 2019 13:52:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonset/</guid>
      <description>介绍 集合是一个无序的不重复的元素序列 操作 创建集合： {}或set()，创建一个空集合必须用set()，{}创建空字典(set(&amp;ldquo;asdgf&amp;rdquo;)会创建[&amp;lsquo;a&amp;rsquo</description>
    </item>
    
    <item>
      <title>python数据结构之列表</title>
      <link>https://laurel-he.github.io/python/pythonlist/</link>
      <pubDate>Fri, 15 Mar 2019 13:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonlist/</guid>
      <description>介绍 可以作为一个方括号内的逗号分隔值出现，列表的数据项不需要具有相同的类型 操作 （1）取值： list[0], list[0:3] （list[-2]代表读取列表中倒数第二个元素） （2）更新列表 添加元素：append&amp;ndash;&amp;gt;</description>
    </item>
    
    <item>
      <title>python数据结构</title>
      <link>https://laurel-he.github.io/python/pythonstructure/</link>
      <pubDate>Fri, 15 Mar 2019 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythonstructure/</guid>
      <description>列表(List) python list deque双向队列 python deque 集合 python set</description>
    </item>
    
    <item>
      <title>python数据结构之双向队列</title>
      <link>https://laurel-he.github.io/python/pythondeque/</link>
      <pubDate>Fri, 15 Mar 2019 09:47:00 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/pythondeque/</guid>
      <description>介绍 两端都可以操作的序列 基本操作 创建： import collections d = collections.deque() 往右边添加一个元素： d.append(1) d.append(&amp;lsquo;adc&amp;rsquo;) 往左添加一个元素： d.appendleft(3) 清空队列： d.clear 浅拷贝： d1 = d.copy() 返回指定元素的出现次数： d.count(1) 从队列右边扩展一个列表的元素： d.extend([3,4,5]) 从队列左边扩展一个列表的</description>
    </item>
    
    <item>
      <title>补充python基础知识</title>
      <link>https://laurel-he.github.io/python/python_base/</link>
      <pubDate>Thu, 14 Mar 2019 15:26:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python_base/</guid>
      <description>##python运算符 幂 返回x的y次幂 10**20 取整除 //:返回商的整数部分，向下取整</description>
    </item>
    
    <item>
      <title>python Generators</title>
      <link>https://laurel-he.github.io/python/generators/</link>
      <pubDate>Thu, 14 Mar 2019 14:41:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/generators/</guid>
      <description>##迭代器Iterator 迭代器是一个可以让程序员遍历一个容器的对象，一个迭代器在遍历并读取一个容器的数据元素时不会执行一个迭代。 迭代器三个部分 可迭代对象 迭代器 迭代 可迭代对象 python中的任意对象，</description>
    </item>
    
    <item>
      <title>python debugger</title>
      <link>https://laurel-he.github.io/python/python_debugger/</link>
      <pubDate>Thu, 14 Mar 2019 11:48:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python_debugger/</guid>
      <description>##准备 来源 http://python.jobbole.com/81184/ 初始代码 import sys def add(num1=0, num2=0): return int(num1) + int(num2) def sub(num1=0, num2=0): return int(num1) - int(num2) def main(): #Assuming our inputs are valid numbers print sys.argv addition = add(sys.argv[1], sys.argv[2]) print addition subtraction = sub(sys.argv[1], sys.argv[2]) print subtraction if __name__ == &amp;#39;__main__&amp;#39;: main() 基础用法 import pdb pdb.set_trace() //设置断点 在程序中添加断点 import pdb import sys def add(num1=0, num2=0): return int(num1) + int(num2) def sub(num1=0, num2=0): return int(num1) - int(num2) def main(): #Assuming our inputs are valid</description>
    </item>
    
    <item>
      <title>python进阶</title>
      <link>https://laurel-he.github.io/python/python/</link>
      <pubDate>Thu, 14 Mar 2019 10:36:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/python/</guid>
      <description>*args和**kwargs *args *args和**kwargs主要用于函数定义，可以将不定数量的参数传递给一个函数 举例 输入： def test_var_args(f_arg, *argv): print(&amp;#34;first normal arg:&amp;#34;, f_arg) for arg in argv: print(&amp;#34;another arg through *argv:&amp;#34;, arg) test_var_args(&amp;#39;yasoob&amp;#39;, &amp;#39;python&amp;#39;, &amp;#39;eggs&amp;#39;, &amp;#39;test&amp;#39;) 输出： first normal arg: yasoob another arg through *argv: python another arg through *argv: eggs another arg through</description>
    </item>
    
    <item>
      <title>python100例学习笔记</title>
      <link>https://laurel-he.github.io/python/20190202/</link>
      <pubDate>Sat, 02 Feb 2019 13:25:21 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/python/20190202/</guid>
      <description>四个数组成不重复三位数 描述 有四个数字，1,2,3,4，能组成多少个不重复的三位数 思考 原文分析：将所有的数字排列组合后去掉不满足条件的列 代码 num = 1; for i in range(1,5): for j in range(1,5): for k in range(1,5): if(i != k) and (i != j) and (j != k): print i,j,k num = num</description>
    </item>
    
    <item>
      <title>各种奇怪的坑</title>
      <link>https://laurel-he.github.io/php/2019_01_01/</link>
      <pubDate>Fri, 01 Feb 2019 16:10:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/2019_01_01/</guid>
      <description>1 strtotime() 描述 获取上个月的时间可以是date(&amp;lsquo;Y-m-d&amp;rsquo;,strtotime(&#39;-1 month&#39;));如果今天是31号而上个月没有31号，就会直接输出这个月1号； 解决办法 使用la</description>
    </item>
    
    <item>
      <title>fastadmin自定义角色组</title>
      <link>https://laurel-he.github.io/php/test-my-site/</link>
      <pubDate>Thu, 31 Jan 2019 17:36:10 +0000</pubDate>
      
      <guid>https://laurel-he.github.io/php/test-my-site/</guid>
      <description>之前使用fastadmin，自定义角色组，发现编辑/删除/修改等等权限可以直接权限管理中选择，然后用不同的角色登陆，会显示对应的权限按钮。此时有一个新的需求就是增加审核和批量审核，并且也增加对应的权限</description>
    </item>
    
  </channel>
</rss>
